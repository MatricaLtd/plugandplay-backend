// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PlugAndPlay.Dal.Model
{
    public partial class PlugAndPlayContext : DbContext
    {
        public PlugAndPlayContext()
        {
        }

        public PlugAndPlayContext(DbContextOptions<PlugAndPlayContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Drzava> Drzava { get; set; }
        public virtual DbSet<Klijent> Klijent { get; set; }
        public virtual DbSet<Kontakt> Kontakt { get; set; }
        public virtual DbSet<Mjesto> Mjesto { get; set; }
        public virtual DbSet<Partner> Partner { get; set; }
        public virtual DbSet<Ponuda> Ponuda { get; set; }
        public virtual DbSet<RefreshToken> RefreshToken { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<StavkaPonude> StavkaPonude { get; set; }
        public virtual DbSet<StavkaPopust> StavkaPopust { get; set; }
        public virtual DbSet<Ugovor> Ugovor { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Drzava>(entity =>
            {
                entity.Property(e => e.Naziv).IsRequired();
            });

            modelBuilder.Entity<Klijent>(entity =>
            {
                entity.Property(e => e.Adresa).IsRequired();

                entity.Property(e => e.Napomena).IsRequired();

                entity.Property(e => e.Naziv).IsRequired();

                entity.HasOne(d => d.Mjesto)
                    .WithMany(p => p.Klijent)
                    .HasForeignKey(d => d.MjestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Klijent_Mjesto");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Klijent)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Klijent_Partner");
            });

            modelBuilder.Entity<Kontakt>(entity =>
            {
                entity.HasIndex(e => e.KlijentId);

                entity.HasIndex(e => e.PartnerId);

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.Funkcija).IsRequired();

                entity.Property(e => e.Ime).IsRequired();

                entity.Property(e => e.Jezik).IsRequired();

                entity.Property(e => e.Napomena).IsRequired();

                entity.Property(e => e.Prefiks).IsRequired();

                entity.Property(e => e.Prezime).IsRequired();

                entity.Property(e => e.Telefon).IsRequired();

                entity.HasOne(d => d.Klijent)
                    .WithMany(p => p.KontaktKlijent)
                    .HasForeignKey(d => d.KlijentId)
                    .HasConstraintName("FK_Kontakt_Klijent");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.KontaktPartner)
                    .HasForeignKey(d => d.PartnerId)
                    .HasConstraintName("FK_Kontakt_Partner");
            });

            modelBuilder.Entity<Mjesto>(entity =>
            {
                entity.Property(e => e.Naziv).IsRequired();

                entity.Property(e => e.PostanskiBroj).IsRequired();

                entity.HasOne(d => d.Drzava)
                    .WithMany(p => p.Mjesto)
                    .HasForeignKey(d => d.DrzavaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Mjesto_Drzava");
            });

            modelBuilder.Entity<Partner>(entity =>
            {
                entity.Property(e => e.Adresa).IsRequired();

                entity.Property(e => e.Bonitet).IsRequired();

                entity.Property(e => e.Duguje).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Eracun).HasColumnName("ERacun");

                entity.Property(e => e.EracunEmail)
                    .IsRequired()
                    .HasColumnName("ERacunEmail");

                entity.Property(e => e.Limit).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Naplaceno).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Napomena).IsRequired();

                entity.Property(e => e.NapomenaUvjet).IsRequired();

                entity.Property(e => e.Naziv).IsRequired();

                entity.Property(e => e.Oib)
                    .IsRequired()
                    .HasColumnName("OIB");

                entity.Property(e => e.Pdv).HasColumnName("PDV");

                entity.Property(e => e.Racun).IsRequired();

                entity.Property(e => e.Realizirano).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Telefon).IsRequired();

                entity.Property(e => e.Uvjet).IsRequired();

                entity.Property(e => e.Valuta).IsRequired();

                entity.HasOne(d => d.Mjesto)
                    .WithMany(p => p.Partner)
                    .HasForeignKey(d => d.MjestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Partner_Mjesto");
            });

            modelBuilder.Entity<Ponuda>(entity =>
            {
                entity.Property(e => e.Brand).IsRequired();

                entity.Property(e => e.Broj).IsRequired();

                entity.Property(e => e.Napomena).IsRequired();

                entity.Property(e => e.Oib)
                    .IsRequired()
                    .HasColumnName("OIB");

                entity.Property(e => e.Pdv).HasColumnName("PDV");

                entity.Property(e => e.Status).IsRequired();

                entity.Property(e => e.Ukupno).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Valuta).IsRequired();

                entity.Property(e => e.ZaPlatiti).HasColumnType("decimal(9, 6)");

                entity.HasOne(d => d.Klijent)
                    .WithMany(p => p.Ponuda)
                    .HasForeignKey(d => d.KlijentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ponuda_Klijent");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Ponuda)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ponuda_Partner");

                entity.HasOne(d => d.Ugovor)
                    .WithMany(p => p.Ponuda)
                    .HasForeignKey(d => d.UgovorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ponuda_Ugovor");
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.HasKey(e => e.IdRefreshToken);

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RefreshToken)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_RefreshToken_User");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<StavkaPonude>(entity =>
            {
                entity.Property(e => e.Cijena).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Iznos).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.JedinicnaCijena).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Količina).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Opis).IsRequired();

                entity.Property(e => e.Popust).HasColumnType("decimal(9, 6)");

                entity.HasOne(d => d.Ponuda)
                    .WithMany(p => p.StavkaPonude)
                    .HasForeignKey(d => d.PonudaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StavkaPonude_Ponuda");
            });

            modelBuilder.Entity<StavkaPopust>(entity =>
            {
                entity.Property(e => e.AgeIznos).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.AgePopust).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.AvansIznos).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.AvansPopust).HasColumnType("decimal(9, 6)");

                entity.HasOne(d => d.Ponuda)
                    .WithMany(p => p.StavkaPopust)
                    .HasForeignKey(d => d.PonudaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StavkaPopust_Ponuda");
            });

            modelBuilder.Entity<Ugovor>(entity =>
            {
                entity.Property(e => e.AgePopust).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.AvansKolicina).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Avb).HasColumnName("AVB");

                entity.Property(e => e.Commit).HasColumnType("decimal(9, 6)");

                //entity.Property(e => e.Filename)
                //    .IsRequired()
                //    .HasMaxLength(1);

                entity.Property(e => e.Naplaceno).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Napomena).IsRequired();

                entity.Property(e => e.Naziv).IsRequired();

                entity.Property(e => e.Realizirano).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.UgovorFlatPopust).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.UgovorKoličinaPopust).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Valuta).IsRequired();
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.FirstName).HasMaxLength(200);

                entity.Property(e => e.LastName).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Password).HasMaxLength(200);
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRole)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_UserRole_Role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRole)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserRole_User");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}